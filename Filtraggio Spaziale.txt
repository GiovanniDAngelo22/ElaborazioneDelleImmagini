#include <opencv2/core.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <iostream>
#include <cstdlib>
#include <cmath>
#define PI 3.14159265

using namespace std;
using namespace cv;
void printFilter(Mat filter);
void printFilter(Mat filter) {
    for (int i = 0; i < filter.rows; i++) {
        for (int j = 0; j < filter.cols; j++)
            cout << filter.at<int>(i, j) << " ";
        cout << endl;
    }
    cout << endl;
}

double Min(double one, double two, double three)
{
    double min = one;
    if (min > two)
        min = two;
    if (min > three)
        min = three;
    return min;
}

void sharpay(Mat& src, Mat& lap, float k = 0.0f)
{
    src.convertTo(src, CV_32F);
    lap.convertTo(lap, CV_32F);
    src = src + k * lap;
}

cv::Mat Padding(cv::Mat& image, int upperpadding, int underpadding, int leftpadding, int rightpadding)
{
    cv::Mat image2 = cv::Mat::ones((image.rows) + upperpadding + underpadding, (image.cols) + leftpadding + rightpadding, image.type());

    image.copyTo(image2(cv::Range(upperpadding, image2.rows - underpadding), cv::Range(leftpadding, image2.cols - rightpadding)));

    return image2;
}

void FiltroSfocato(cv::Mat& image)
{
    cv::Mat image2 = Padding(image, 1, 1, 1, 1);
    int r2 = 1, c2 = 1;
    int media = 0;
    for (int r = 0; r < image.rows; r++, r2++)
    {
        c2 = 1;
        for (int c = 0; c < image.cols; c++, c2++)
        {

            for (int i = 0; i < image.dims; i++)
            {
                for (int indexr = -1; indexr < 2; indexr++)
                {
                    for (int indexc = -1; indexc < 2; indexc++)
                    {
                        media += image2.at<Vec3b>(r2 + indexr, c2 + indexc)[i];
                    }
                }
                image.at<Vec3b>(r, c)[i] = (media / 9);
                media = 0;
            }

        }

    }

}

cv::Mat Correlazione(cv::Mat image, cv::Mat kernel)
{
    Mat output = Mat(image.dims, image.size, image.type());
    int range = floor(kernel.rows / 2);
    Mat copia;
    Mat imagepad;
    copyMakeBorder(image, imagepad, range, range, range, range, BORDER_CONSTANT, Scalar(0));

    for (int i = range; i < image.rows + range; i++)
    {
        for (int j = range; j < image.cols + range; j++)
        {
            copia = kernel.mul(imagepad(cv::Range(i - range, i + range + 1), cv::Range(j - range, j + range + 1)));
            image.at<int>(i - range, j - range) = sum(copia)[0];
        }
    }

    cout << "sono qui" << endl;
    return output;

}


cv::Mat FiltroLaplaciano(cv::Mat& image)
{
    //Creo un immagine clone che diventerà l'immagine con filtro laplaciano per intero
    Mat copyImage = image.clone();
    //assegno il valore del contributo che deve dare il filtro
    const float k = 0.8f; //valore che può assumere 0<k<1
    //creo il filtro 45*
    int filter45[3][3] = { {-1,-1,-1},{-1,8,-1},{-1,-1,-1} };
    Mat filter = Mat(3, 3, CV_32S, filter45);
    //Effettuo una riduzione del rumore
    GaussianBlur(image, image, Size(3, 3), 0, 0, BORDER_DEFAULT);
    //Converto l'immagine in Shorts per poter fare le operazioni nella correlazione
    image.convertTo(image, CV_32S);
    Correlazione(image, filter);
    //In sharpay applico l'immagine laplaciana sulla copia con un contributo pari a k
    sharpay(copyImage, image, k);
    //riporto l'immagine in uchar per poter effettuare la visualizzazione
    copyImage.convertTo(copyImage, CV_8U);
    return copyImage;
}

cv::Mat RGB2HSI(cv::Mat& imageRGB)
{
    cv::Mat imageHSI = Mat(imageRGB.rows,imageRGB.cols,imageRGB.type());
    float h, s, k;
    float r, g, b;
    float theta; //angolo di ???
    float numeratore, denominatore; // per aiutarmi nelle operazioni di divisione
    for (int i = 0; i < imageRGB.rows; i++)
    {
        
        for (int j = 0; j < imageRGB.cols; j++)
        {
            
            b = imageRGB.at<Vec3b>(i, j)[0];
            g = imageRGB.at<Vec3b>(i, j)[1];
            r = imageRGB.at<Vec3b>(i, j)[2];

            numeratore = (0.5) * ((r - g) + (r - b));
            denominatore = sqrt(pow((r - g), 2) + ((r - b) * (g - b)));


            theta = acos(double(numeratore / denominatore));

            if (b <= g)
            {
                h = (float)theta;
            }
            else
            {
                h = float(360) - (float)theta;
            }

            s = 1 - ((3 * Min(r, g, b)) / (r + g + b));

            k = (r + g + b) / 3;

            imageHSI.at<Vec3b>(i, j)[0] = h;
            imageHSI.at<Vec3b>(i, j)[1] = s;
            imageHSI.at<Vec3b>(i, j)[2] = k;
        }
    }
    return imageHSI;
}

cv::Mat HSI2RGB(cv::Mat imageHSI)
{
    cv::Mat imageRGB = Mat(imageHSI.rows, imageHSI.cols, imageHSI.type());
    float h, s, k;
    double r, g, b;
    double theta; //angolo di ???
    double numeratore, denominatore; // per aiutarmi nelle operazioni di divisione

    for (int i=0; i<imageHSI.rows;i++)
    {
        for (int j = 0; j < imageHSI.cols; j++)
        {
            printf("%f", imageHSI.at<Vec3b>(i, j)[0]);
            cout << endl;
        }
    }

    return imageHSI;
}

Mat rgb2hsi(Mat RGB) {
    Mat HSI(RGB.rows, RGB.cols, CV_32FC3);

    for (int i = 0; i < RGB.rows; i++)
        for (int j = 0; j < RGB.cols; j++) {

            HSI.at<Vec3f>(i, j)[2] = (RGB.at<Vec3b>(i, j)[0] + RGB.at<Vec3b>(i, j)[1] + RGB.at<Vec3b>(i, j)[2]) / 3;

            if (HSI.at<Vec3f>(i, j)[2] == 255) {
                HSI.at<Vec3f>(i, j)[0] = 0;
                HSI.at<Vec3f>(i, j)[1] = 0;
            }

            if (HSI.at<Vec3f>(i, j)[2] > 0) {

                double minRGB = min(RGB.at<Vec3b>(i, j)[0], min(RGB.at<Vec3b>(i, j)[1], RGB.at<Vec3b>(i, j)[2]));
                HSI.at<Vec3f>(i, j)[1] = 1 - minRGB / HSI.at<Vec3f>(i, j)[2];
            }
            else {
                HSI.at<Vec3f>(i, j)[1] = 0;
            }

            double num = RGB.at<Vec3b>(i, j)[0] - (RGB.at<Vec3b>(i, j)[1] / 2) - (RGB.at<Vec3b>(i, j)[2] / 2);
            double den = sqrt(pow(RGB.at<Vec3b>(i, j)[0] - RGB.at<Vec3b>(i, j)[1], 2) + (RGB.at<Vec3b>(i, j)[0] - RGB.at<Vec3b>(i, j)[2]) * (RGB.at<Vec3b>(i, j)[1] - RGB.at<Vec3b>(i, j)[2]));
            if (den > 0) {
                float arg = num / den;
                HSI.at<Vec3f>(i, j)[0] = acos(arg > 1 ? 1 : arg) * 180.0 / PI;
            }
            else
                HSI.at<Vec3f>(i, j)[0] = 0;

            if (RGB.at<Vec3b>(i, j)[2] > RGB.at<Vec3b>(i, j)[1])
                HSI.at<Vec3f>(i, j)[0] = 360 - HSI.at<Vec3f>(i, j)[0];

            //cout<<HSI.at<Vec3f>(i,j)<<endl;
            //cin.get();
        }
    return HSI;
}

Mat hsi2rgb(Mat HSI) {
    Mat RGB(HSI.rows, HSI.cols, CV_8UC3);

    for (int i = 0; i < RGB.rows; i++)
        for (int j = 0; j < RGB.cols; j++) {
            if(HSI.at<Vec3f>(i,j)[0]==0){
                RGB.at<Vec3b>(i,j)[0] = HSI.at<Vec3f>(i,j)[2] * (2 + HSI.at<Vec3f>(i,j)[2] * HSI.at<Vec3f>(i,j)[1]);
                RGB.at<Vec3b>(i,j)[1] = HSI.at<Vec3f>(i,j)[2] * (1 - HSI.at<Vec3f>(i,j)[1]);
                RGB.at<Vec3b>(i,j)[2] = HSI.at<Vec3f>(i,j)[2] * (1 - HSI.at<Vec3f>(i,j)[1]);
            }
            else if (0 <= HSI.at<Vec3f>(i, j)[0] && HSI.at<Vec3f>(i, j)[0] < 120) {
                RGB.at<Vec3b>(i, j)[2] = HSI.at<Vec3f>(i, j)[2] * (1 - HSI.at<Vec3f>(i, j)[1]);
                RGB.at<Vec3b>(i, j)[0] = HSI.at<Vec3f>(i, j)[2] * (1 + (HSI.at<Vec3f>(i, j)[1] * cos(HSI.at<Vec3f>(i, j)[0] * PI / 180.0) / cos((60 - HSI.at<Vec3f>(i, j)[0]) * PI / 180.0)));
                RGB.at<Vec3b>(i, j)[1] = 3 * HSI.at<Vec3f>(i, j)[2] - (RGB.at<Vec3b>(i, j)[0] + RGB.at<Vec3b>(i, j)[2]);
            }else if(HSI.at<Vec3f>(i,j)[0]==120){
                RGB.at<Vec3b>(i,j)[0] = HSI.at<Vec3f>(i,j)[2] * (1 - HSI.at<Vec3f>(i,j)[1]);
                RGB.at<Vec3b>(i,j)[1] = HSI.at<Vec3f>(i,j)[2] * (2 + HSI.at<Vec3f>(i,j)[2] * HSI.at<Vec3f>(i,j)[1]);
                RGB.at<Vec3b>(i,j)[2] = HSI.at<Vec3f>(i,j)[2] * (1 - HSI.at<Vec3f>(i,j)[1]);
            }else if (120 <= HSI.at<Vec3f>(i, j)[0] && HSI.at<Vec3f>(i, j)[0] < 240) {
                HSI.at<Vec3f>(i, j)[0] -= 120;
                RGB.at<Vec3b>(i, j)[0] = HSI.at<Vec3f>(i, j)[2] * (1 - HSI.at<Vec3f>(i, j)[1]);
                RGB.at<Vec3b>(i, j)[1] = HSI.at<Vec3f>(i, j)[2] * (1 + (HSI.at<Vec3f>(i, j)[1] * cos(HSI.at<Vec3f>(i, j)[0] * PI / 180.0) / cos((60 - HSI.at<Vec3f>(i, j)[0]) * PI / 180.0)));
                RGB.at<Vec3b>(i, j)[2] = 3 * HSI.at<Vec3f>(i, j)[2] - (RGB.at<Vec3b>(i, j)[0] + RGB.at<Vec3b>(i, j)[1]);
            }else if(HSI.at<Vec3f>(i,j)[0]==240){
                RGB.at<Vec3b>(i,j)[0] = HSI.at<Vec3f>(i,j)[2] * (1 - HSI.at<Vec3f>(i,j)[1]);
                RGB.at<Vec3b>(i,j)[1] = HSI.at<Vec3f>(i,j)[2] * (1 - HSI.at<Vec3f>(i,j)[1]);
                RGB.at<Vec3b>(i,j)[2] = HSI.at<Vec3f>(i,j)[2] * (2 + HSI.at<Vec3f>(i,j)[2] * HSI.at<Vec3f>(i,j)[1]);
            }else {
                HSI.at<Vec3f>(i, j)[0] -= 240;
                RGB.at<Vec3b>(i, j)[1] = HSI.at<Vec3f>(i, j)[2] * (1 - HSI.at<Vec3f>(i, j)[1]);
                RGB.at<Vec3b>(i, j)[2] = HSI.at<Vec3f>(i, j)[2] * (1 + (HSI.at<Vec3f>(i, j)[1] * cos(HSI.at<Vec3f>(i, j)[0] * PI / 180.0) / cos((60 - HSI.at<Vec3f>(i, j)[0]) * PI / 180.0)));
                RGB.at<Vec3b>(i, j)[0] = 3 * HSI.at<Vec3f>(i, j)[2] - (RGB.at<Vec3b>(i, j)[1] + RGB.at<Vec3b>(i, j)[2]);
            }
        }
    return RGB;
}



int main(int argc, char** argv) {

    int dim, th;

    if (argc < 2) {
        cout << "usage: " << argv[0] << " image_name" << endl;
        exit(0);
    }
    String imageName = argv[1];

    //Lettura immagine    
    Mat image;
    image = imread(samples::findFile(imageName), IMREAD_COLOR);
    if (image.empty()) {
        cout << "Could not open or find the image" << std::endl;
        return -1;
    }

   cv::Mat imageHSI = rgb2hsi(image);
   cv::Mat backtoRGB = hsi2rgb(imageHSI);
   

   //cv::Mat backRGB = HSI2RGB(imageHSI);


    //Lettura dimensione filtro
    //cout << "Inserire dimensione filtro: ";
    //cin >> dim;

    //Allocazione filtro e convoluzione
    //Mat average_filter = Mat::ones(dim, dim, CV_32F) / (float)(dim * dim);


    //Per la convoluzione ruotare il filtro di 180°
    //rotate(filter,r_filter,ROTATE_180);
    /*
    Mat output1;
    filter2D(image, output1, image.type(), average_filter);

    //Blurring average filter
    Mat output2;
    blur(image, output2, Size(dim, dim));

    //Blurring average filter
    Mat output3;
    boxFilter(image, output3, image.type(), Size(dim, dim));

    //Median filter
    Mat output4;
    medianBlur(image, output4, dim);

    //Gaussian filter
    Mat output5;
    GaussianBlur(image, output5, Size(dim, dim), 0, 0);
    */
    cv::imshow("Original image", image);
    //Laplacian filter
    // Mat output6 = Mat(image);
    // output6 = FiltroLaplaciano(output6);

    cv::imshow("image HSI", imageHSI);
    cv::imshow("image backtoRGB", backtoRGB);






    //cv::imshow("Filter2D image", output1);
    //cv::imshow("Blur image", output2);
    //cv::imshow("BoxFilter image", output3);
    //cv::imshow("MedianBlur image", output4);
    //cv::imshow("GaussianBlur image", output5);
   // cv::imshow("Laplacian image", output6);

    cv::waitKey(0);

    //cout << "Inserire threshold: ";
    //cin >> th;

    //Thresholding 
    // Mat mask;
    // threshold(output5, mask, th, 1, CV_THRESH_BINARY_INV); 
    // Immagine * maschera per mostrare solo le regioni di interesse
    // cv::imshow("Image*Mask", image.mul(mask));

    //vector<int> compression_params;
    //compression_params.push_back(CV_IMWRITE_PNG_COMPRESSION);
    //compression_params.push_back(9);
    //imwrite("risultato.png", output6, compression_params);

    //cv::waitKey(0);
    return 0;
}


/*using namespace cv;
using namespace std;

cv::Mat Padding(cv::Mat &image, int upperpadding, int underpadding,  int leftpadding, int rightpadding)
{
    cv::Mat image2 = cv::Mat::ones((image.rows) + upperpadding + underpadding, (image.cols) + leftpadding + rightpadding, image.type());

    image.copyTo(image2(cv::Range(upperpadding, image2.rows - underpadding), cv::Range(leftpadding, image2.cols - rightpadding )));

    return image2;
}

void FiltroSfocato(cv::Mat& image)
{
    cv::Mat image2 = Padding(image,1,1,1,1);
    int r2 = 1, c2 = 1;
    int media=0;
    for (int r = 0; r < image.rows; r++, r2++)
    {
        c2 = 1;
        for (int c = 0; c < image.cols; c++, c2++)
        {

            for (int i = 0; i < image.dims; i++)
            {
                for (int indexr = -1; indexr < 2; indexr++)
                {
                    for (int indexc = -1; indexc < 2; indexc++)
                    {
                        media += image2.at<Vec3b>(r2 + indexr, c2 + indexc)[i];
                    }
                }
                image.at<Vec3b>(r, c)[i] = (media / 9) ;
                media = 0;
            }

        }

    }

}


int main( int argc, char** argv )
{
    if( argc != 2)
    {
     cout <<" Usage: " << argv[0] << " ImageToLoadAndDisplay" << endl;
     return -1;
    }

    Mat image;
    image = imread(argv[1], IMREAD_COLOR); // Read the file

    if( image.empty() ) // Check for invalid input
    {
        cout << "Could not open or find the image" << std::endl ;
        return -1;
    }




    cv::Mat image2 = Padding(image,1,1,1,1);
    FiltroSfocato(image);


    namedWindow( "Display window", WINDOW_AUTOSIZE ); // Create a window for display.
    imshow( "Display window", image2 ); // Show our image inside it.

    waitKey(0); // Wait for a keystroke in the window

    namedWindow("Display2", WINDOW_AUTOSIZE);
    imshow("Display2", image); // Show our image inside it.

    waitKey(0); // Wait for a keystroke in the window



    return 0;
}*/

