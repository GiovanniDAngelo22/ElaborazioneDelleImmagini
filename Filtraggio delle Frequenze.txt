#include<opencv2/opencv.hpp>
#include<iostream>

using namespace std;
using namespace cv;

// Lista dei filtri
Mat LowPassFilter(Size size, float coff);
Mat HighPassFilter(Size size, float coff);
Mat LowButterworthFilter(Size size, float coff, int n);
Mat LaplacianFilter(Size size, float coff);
Mat LaplacianApplicato(Mat image, Mat filtro, float coff);

// Operazione di filtraggio
Mat FreqFiltering(Mat& src, Mat& filter);

int main(int argc, char* argv[])
{
    // Apertura dell'immagine originale
    const char* filename = argc >= 2 ? argv[1] : "lena.jpg";
    Mat input = imread(filename, IMREAD_GRAYSCALE);
    if (input.empty())
        return -1;
    imshow("input", input);

    // Padding ottimale
    int M = getOptimalDFTSize(input.rows);
    int N = getOptimalDFTSize(input.cols);
    Mat padded;
    copyMakeBorder(input, padded, 0, M - input.rows, 0, N - input.cols, BORDER_CONSTANT, Scalar::all(0));


    // Realizzazione del Filtro
    float coff = argc >= 3 ? atof(argv[2]) : 160.0f;
    Mat filter = LaplacianFilter(Size(padded.cols, padded.rows), coff);
    imshow("filter", filter);

    // Applicazione del filtro
    Mat output = FreqFiltering(padded, filter);

    Mat filtroLaplacianoApplicato = LaplacianApplicato(padded2, output, 0.9);
    imshow("filtrolaplaciano", filtroLaplacianoApplicato);

    // Rimozione Padding
    output = output(cv::Rect(0, 0, input.cols, input.rows));
    imshow("output", output);


    waitKey();
    return 0;
}

Mat LowPassFilter(Size size, float coff)
{
    Mat filter(size, CV_32FC1);
    for (int i = 0; i < filter.rows; i++)
        for (int j = 0; j < filter.cols; j++) {
            double d = sqrt(pow((i - filter.rows / 2), 2) + pow((j - filter.cols / 2), 2));
            if (d <= coff)
                filter.at<float>(i, j) = 1;
            else
                filter.at<float>(i, j) = 0;
        }
    return filter;
}

Mat HighPassFilter(Size size, float coff)
{
	Mat filter(size, CV_32FC1);
	for (int i = 0; i < filter.rows; i++)
		for (int j = 0; j < filter.cols; j++) {
			double d = sqrt(pow((i - filter.rows / 2), 2) + pow((j - filter.cols / 2), 2));
			if (d > coff)
				filter.at<float>(i, j) = 1;
			else
				filter.at<float>(i, j) = 0;
		}
	return filter;
}

Mat LowButterworthFilter(Size size, float coff, int n)
{
	Mat filter(size, CV_32FC1);
	for (int i = 0; i < filter.rows; i++)
		for (int j = 0; j < filter.cols; j++) {
			double d = sqrt(pow((i - filter.rows / 2), 2) + pow((j - filter.cols / 2), 2));
			d = d / coff;
			filter.at<float>(i, j) = 1 / (1+  pow(d, 2));
		}
	return filter;
}

Mat HighButterworthFilter(Size size, float coff, int n)
{
	Mat filter(size, CV_32FC1);
	for (int i = 0; i < filter.rows; i++)
		for (int j = 0; j < filter.cols; j++) {
			double d = sqrt(pow((i - filter.rows / 2), 2) + pow((j - filter.cols / 2), 2));
			d = d / coff;
			filter.at<float>(i, j) = 1 / (1 + pow(d, 2*n));
		}
	return filter;
}

Mat LaplacianFilter(Size size, float coff)
{
	Mat filter(size, CV_32FC1);
	for (int i = 0; i < filter.rows; i++)
		for (int j = 0; j < filter.cols; j++) {
			double d = sqrt(pow((i - filter.rows / 2), 2) + pow((j - filter.cols / 2), 2));
			filter.at<float>(i, j) = -4 * CV_PI * CV_PI * (pow((float)(i - filter.rows / 2), 2.0f) + pow((float)(j - filter.cols / 2), 2.0f));
		}
	return filter;
}

Mat LaplacianApplicato(Mat image, Mat filtro, float coff)
{
    Mat immagineLaplaciana = image + (coff * filtro);
    return immagineLaplaciana;
}


Mat FreqFiltering(Mat& src, Mat& filter)
{
    // 2. Trasformata di Fourier (DFT) sull’immagine originale

    /// DFT vuole un'immagine con un canale in più, quindi lo creiamo con zeros
    src.convertTo(src, CV_32FC1);
    Mat plane[] =
    {
        src,
        Mat::zeros(src.size() , CV_32FC1)
    };
    /// Fondiamo i due piani in una nuova matrice
    Mat complexIm;
    merge(plane, 2, complexIm);
    /// Applichiamo la DFT
    dft(complexIm, complexIm);
    /// La DFT restituisce una parte reale e una immaginaria, dividiamole nell'array "planes"
    split(complexIm, plane);

    /// La trasformata viene centrata
    int cx = plane[0].cols / 2;
    int cy = plane[0].rows / 2;

    Mat part1_r(plane[0], Rect(0, 0, cx, cy));
    Mat part2_r(plane[0], Rect(cx, 0, cx, cy));
    Mat part3_r(plane[0], Rect(0, cy, cx, cy));
    Mat part4_r(plane[0], Rect(cx, cy, cx, cy));

    Mat temp;
    part1_r.copyTo(temp);
    part4_r.copyTo(part1_r);
    temp.copyTo(part4_r);

    part2_r.copyTo(temp);
    part3_r.copyTo(part2_r);
    temp.copyTo(part3_r);

    Mat part1_i(plane[1], Rect(0, 0, cx, cy));
    Mat part2_i(plane[1], Rect(cx, 0, cx, cy));
    Mat part3_i(plane[1], Rect(0, cy, cx, cy));
    Mat part4_i(plane[1], Rect(cx, cy, cx, cy));

    part1_i.copyTo(temp);
    part4_i.copyTo(part1_i);
    temp.copyTo(part4_i);

    part2_i.copyTo(temp);
    part3_i.copyTo(part2_i);
    temp.copyTo(part3_i);

    // 3. Moltiplicazione tra filtro e immagine
    Mat out_r, out_i, out;
    multiply(plane[0], filter, out_r);
    multiply(plane[1], filter, out_i);
    Mat plane1[] = { out_r, out_i };
    merge(plane1, 2, out);

    // 4. Antitrasformata di Fourier
    idft(out, out);
    split(out, plane);
    magnitude(plane[0], plane[1], plane[0]);
    normalize(plane[0], plane[0], 1, 0, CV_MINMAX);
    return plane[0];
}
